SHELL = /bin/bash
TARGET = velvet.so

CSOURCETARGET = velvet.c
CUSOURCETARGET = velvet.cu

BCOMPILER = bend
BCFLAGS = gen-c
BCUFLAGS = gen-cu

CCOMPILER = gcc
CUCOMPILER = nvcc

CFLAGS = -rdynamic -lm
CUFLAGS = --compiler-options=rdynamic

BSOURCES = velvet.bend
CSOURCES = hashing.c file_ops.c velvet.c
CUSOURCES = hashing.cu file_ops.cu velvet.cu
COBJS = $(CSOURCES:.c=.o)
CUOBJS = $(CUSOURCES:.cu=.o)

TARGETDIR = bin/
SOURCEDIR = src/
BUILDDIR = build/



all: $(TARGETDIR)$(TARGET)

$(TARGETDIR)$(TARGET): $(BUILDDIR)$(OBJS) $(BUILDDIR)$(CUOBJS)
	$(CUCOMPILER) $(CUFLAGS) -o $(BUILDDIR)$(CUOBJS)

$(BUILDDIR)$(CUOBJS): $(SOURCEDIR)$(CUSOURCES)
	$(CUCOMPILER) $(CUFLAGS) -c $(SOURCEDIR)$(CUSOURCES) -o $(TARGETDIR)$(TARGET)

$(SOURCEDIR)$(CUSOURCES): $(SOURCEDIR)$(BSOURCES)
	$(BCOMPILER) $(BCUFLAGS) $(SOURCEDIR)$(BSOURCES) > $(SOURCEDIR)$(CUSOURCETARGET)

cpu: $(TARGETDIR)$(TARGET)

$(TARGETDIR)$(TARGET): $(BUILDDIR)$(COBJS)
	$(CCOMPILER) $(CFLAGS) -o $(BUILDDIR)$(COBJS)

$(BUILDDIR)$(COBJS): $(SOURCEDIR)$(CSOURCES)
	$(CCOMPILER) $(CFLAGS) -c $(SOURCEDIR)$(CSOURCES) -o $(BUILDDIR)$(COBJS)

$(SOURCEDIR)$(CSOURCES): $(SOURCEDIR)$(BSOURCES)
	$(BCOMPILER) $(BCFLAGS) $(SOURCEDIR)$(BSOURCES) > $(SOURCEDIR)$(CSOURCETARGET)

clean:
	rm -f $(BUILDDIR)$(COBJS) $(BUILDDIR)$(CUOBJS) $(TARGETDIR)$(TARGET)
	rm -f $(SOURCEDIR)$(CSOURCETARGET) $(SOURCEDIR)$(CUSOURCETARGET)
